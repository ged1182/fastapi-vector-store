# settings.py
"""This module is a way to setup the config or settings of our services via environment variables."""

from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import BaseModel, Field, SecretStr
from typing import Annotated, Literal

class PostgreSQLSettings(BaseModel):
    USER : Annotated[str, Field(description="postgresql user")] = ...
    PASSWORD : Annotated[SecretStr, Field(description="postgresql password")] = ...
    SERVER : Annotated[str, Field(description="postgresql host + port")] = ...
    DATABASE : Annotated[str, Field(description="postgresql database")] = ...

class RedisSettings(BaseModel):
    SERVER : Annotated[str, Field(description="redis host + port")] = ...
    USER : Annotated[str, Field(description="redis user")] = ...
    PASSWORD : Annotated[SecretStr, Field(description="redis password")] = ...
    DATABASE : Annotated[int, Field(description="redis database")] = 0

class EmbeddingSettings(BaseModel):
    PROVIDER : Annotated[Literal["OpenAI"], Field(description="embedding provider")] = ...
    MODEL : Annotated[Literal["text-embedding-small", "text-embedding-large"], Field(description="embedding model")] = ...
    API_KEY : Annotated[SecretStr, Field(description="provider api key")] = ...
    DIMENSION : Annotated[int, Field(description="embedding dimension")] = 512

class Settings(BaseSettings):
    model_config: SettingsConfigDict = SettingsConfigDict(
        env_prefix="FASTAPI_VECTOR_STORE_",
        env_nested_delimiter="__",
        env_file=".env",
        case_sensitive=True,
    )
    POSTGRESQL_SETTINGS : Annotated[PostgreSQLSettings, Field(description="postgresql settings")] = ...
    REDIS_SETTINGS : Annotated[RedisSettings, Field(description="redis settings")] = ...
    EMBEDDING_SETTINGS : Annotated[EmbeddingSettings, Field(description="embedding settings")] = ...

settings = Settings()